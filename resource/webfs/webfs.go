// Code generated by go-bindata. DO NOT EDIT.
// sources:
// resource/localweb/buy.html (752B)
// resource/localweb/index.html (3.523kB)
// resource/localweb/login.html (632B)

package webfs

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _resourceLocalwebBuyHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x52\x5f\x6f\xd3\x30\x10\x7f\xcf\xa7\x38\xf2\x4c\xec\xb4\x89\xa6\xae\x4b\x23\xb1\x36\x08\xa4\x6d\x54\x53\x06\x42\xd5\x1e\xae\x89\xd7\x58\xb8\x71\xf0\x5d\x17\xaa\x69\x7c\x76\xe4\x36\x13\x03\xca\xbd\x9c\xee\xf7\xe7\xf2\xcb\xc9\xd9\x9b\xc5\xa7\x79\xf9\x75\x59\xc0\x87\xf2\xfa\x0a\x96\x77\x97\x57\x1f\xe7\x10\x46\x52\x7e\x49\xe6\x52\x2e\xca\xc5\x91\x48\x45\x0c\xa5\xc3\x96\x34\x6b\xdb\xa2\x91\xb2\xb8\x09\x03\x18\x2a\x6c\x98\xbb\xa9\x94\x7d\xdf\x8b\x3e\x11\xd6\x6d\x64\x79\x2b\x47\xe7\xe7\x13\x79\x5b\xcc\xa3\x86\xb7\x26\x8d\x23\x3f\xc7\xe9\x38\x95\xc6\x5a\x52\xa2\xe6\x3a\xcc\x83\xcc\x93\xbe\x29\xac\xf3\x6c\xab\x18\xc1\x2f\x8b\xd4\xf7\x9d\x7e\x9c\x85\x95\x6d\x59\xb5\x1c\xf1\xbe\x53\x21\x0c\xd3\x2c\x64\xf5\x83\xa5\x77\x5e\x40\xd5\xa0\x23\xc5\xb3\xbb\xf2\x7d\x34\x09\xf3\x43\xa6\x8c\x78\x6f\x14\x78\xd3\xa0\xad\x88\x06\xce\x17\xe3\xda\x28\xb1\x45\xdd\xc2\xd3\xf3\x6f\xd4\x09\x67\xfb\x3f\x90\x5a\x54\xca\x98\xd7\x50\xad\x1f\xc5\xda\xd8\xea\xdb\xdf\x60\x87\x0e\x37\x0e\xbb\xe6\x35\x21\x1e\x6c\xcb\x31\x3c\x81\xef\xd3\x51\xda\x31\xbc\x73\x1a\xcd\x5b\x20\x6c\x29\x22\xe5\xf4\xc3\x05\x3c\x07\xc7\xd4\xf2\x10\x3b\x0f\x32\x79\xb8\x46\x90\xad\x6d\xbd\xcf\x83\xac\x83\xca\x20\xd1\x2c\x3c\x6c\x0b\xf3\x82\x1b\x58\x3a\x5d\xa9\x29\xa4\xc9\x99\x88\xc7\x99\xec\x4e\xc8\x3e\x2f\x6f\x5e\x64\x89\x1c\xc1\xd6\xb6\xdc\x9c\x56\x5e\x7b\x6a\x0a\xab\xb3\xfb\xd3\x7c\x69\x19\xcd\xcb\xae\xd1\x04\x6a\x6b\x0c\x3a\x82\xc2\xbb\x62\x11\xa7\xc9\x69\x5f\x41\xac\xb7\xc8\x0a\x36\x48\x5e\x38\xfe\xc7\x19\xc7\xc9\xe4\x3f\xdf\x74\x58\x2b\x20\x46\xde\xd1\x14\x7a\xd4\xac\xdb\x8d\xa4\x5d\x55\x29\xa2\xd3\x96\xd5\xe5\x6e\x7f\x0f\xab\xca\x58\x52\xc3\x9f\xc8\xe1\x84\xf2\xf8\xcc\x7e\xfe\x0a\x00\x00\xff\xff\x9c\x09\x74\x25\xf0\x02\x00\x00")

func resourceLocalwebBuyHtmlBytes() ([]byte, error) {
	return bindataRead(
		_resourceLocalwebBuyHtml,
		"resource/localweb/buy.html",
	)
}

func resourceLocalwebBuyHtml() (*asset, error) {
	bytes, err := resourceLocalwebBuyHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "resource/localweb/buy.html", size: 752, mode: os.FileMode(0644), modTime: time.Unix(1599050278, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xec, 0xea, 0x2b, 0xe3, 0x4, 0x87, 0xcc, 0xb8, 0x0, 0x7e, 0x3c, 0xbe, 0x57, 0x3b, 0x8a, 0xca, 0x7d, 0x82, 0x89, 0xae, 0xeb, 0x74, 0xd4, 0x29, 0x29, 0xa4, 0x41, 0x67, 0x90, 0x19, 0x6f, 0x44}}
	return a, nil
}

var _resourceLocalwebIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x97\xdd\x6f\xdb\x36\x10\xc0\xdf\xfd\x57\xdc\x38\x60\x4f\x93\xa8\xaf\xd4\x96\x22\x0b\x88\x1d\xa7\x19\x9a\x74\x81\xeb\x2c\x5b\x87\x3d\xd0\xd2\xd9\x22\x42\x93\xaa\x48\xc5\xf1\x8a\xfe\xef\x83\x64\xd9\x4d\x16\xdb\x5b\xd6\x7d\x20\xc0\xf4\x40\xe9\x8e\xe6\xf1\x77\x1f\xf2\x89\xf1\x57\xa7\xdf\x0f\x27\x3f\x5d\x8d\xe0\x7c\x72\x79\x01\x57\xd7\x83\x8b\xef\x86\x40\x2c\x4a\x6f\xfc\x21\xa5\xa7\x93\xd3\xf5\x44\x60\x3b\x30\x29\x99\xd4\xdc\x70\x25\x99\xa0\x74\xf4\x96\x74\xa0\xbd\x48\x6e\x4c\x11\x51\xba\x5c\x2e\xed\xa5\x6f\xab\x72\x4e\x27\x63\xea\x86\x61\x8f\x8e\x47\x43\x2b\x37\x0b\x11\x38\x56\x2d\x3b\x81\x17\x50\xa1\x94\x46\x3b\x33\x19\x49\x3a\x71\x3d\x59\xdf\x90\x65\x49\xbc\x40\xc3\xa0\x36\x66\xe1\x87\x8a\xdf\xf5\x49\xaa\xa4\x41\x69\x2c\xb3\x2a\x90\x40\x2b\xf5\x89\xc1\x7b\x43\xeb\x95\xc7\x90\xe6\xac\xd4\x68\xfa\xd7\x93\x33\xab\x47\x92\x86\x29\xd6\x66\x25\x10\xea\x45\xed\x6f\x53\xad\xdb\xb9\xfa\x32\x6c\x2a\xd0\x5e\x30\x2e\xe1\xe3\xa7\xcf\xda\xd2\x2e\xd5\xf2\x91\x26\xb3\x53\x14\xe2\xa1\x2a\xe3\x77\xf6\x54\xa8\xf4\xf6\xf7\xca\x82\x95\x6c\x5e\xb2\x22\x7f\x38\x61\xcf\x94\x34\x0e\x7c\x84\xfa\x1e\xb9\x41\x61\xe0\xa4\xe4\x4c\x7c\x0b\x9a\x49\x6d\x69\x2c\xf9\xec\x18\x3e\x75\xd6\xd4\xb4\xc1\x4e\x3a\x31\x6d\xa2\xd1\x89\xa7\x2a\x5b\x25\x9d\x4e\x27\x2e\x20\x15\x4c\xeb\x3e\x69\xec\x91\x64\x58\x95\x25\x4a\x03\x17\x3c\x45\xa9\x11\x46\xf7\x05\x2f\x11\x4e\x99\xc1\x08\x62\x5d\x30\x09\x8d\xad\x3a\x80\x42\x95\x11\x7c\x9d\x76\xbd\xa3\x00\x49\xe2\x39\x9e\x63\x39\x3d\xcb\x0b\xa9\xeb\x46\xbe\x17\x79\x7e\x4c\xeb\x05\x09\x7c\x23\xa7\xba\x38\x7e\x3a\xc6\x5c\x16\x95\x69\xa3\x39\xad\x8c\x51\x92\x80\x64\x8b\x46\x5a\x11\xe0\x59\xfb\x70\xc7\x44\x85\x7d\x32\xa8\x56\x1b\x30\xb2\xcb\xea\x73\xed\x89\xd6\xc9\x0c\x0d\xe3\x42\x93\x24\xa6\x45\xf2\x34\x26\x3f\x5c\xbd\x85\x4b\x95\x61\xb4\x7f\xcb\xda\xf2\x5d\x21\x17\x2a\xc3\xcd\x8e\x5b\x71\x8d\x53\xb2\x8c\x2b\x92\xc0\x6b\xa1\xa6\x4c\xc0\xb3\xd7\x5d\xb1\x74\x3f\xdd\x3b\xc3\x4c\xa5\x77\xf1\xb5\x94\x87\x12\x37\xae\xa4\xe4\x72\x4e\xdf\x19\x55\x60\xf6\x47\x39\x7b\xee\xb8\x1b\x7a\x53\x66\x97\x5c\x62\x09\x17\x5c\x9b\x03\xf0\xfb\xb3\x5a\xe2\xac\x44\x9d\xaf\x33\xbb\x15\xda\xec\x8e\x5b\x79\x9d\xd5\x4e\x5c\x89\x4d\x04\x04\xd7\xc6\x6a\x9e\x23\xa9\x24\x1e\x93\x24\x16\xfc\xf3\x4b\xfc\x84\xb6\x09\x5f\x92\x71\x9d\x2a\x29\x31\x35\xdb\x28\x3d\xc8\xe2\xa2\xf6\x64\xc3\xd5\x0a\x8f\x32\xb8\xcf\xbd\x9f\xdd\x5f\xc0\xcc\xbd\x37\x37\xa3\x21\x9b\xe4\x1f\x56\x2e\x54\xef\xb5\x39\x5b\xbd\x56\x6f\x06\x37\x3f\x4e\x6f\xaf\x17\xe7\x6c\xa4\xc6\xab\xf7\xaf\x6e\x70\xea\xc2\xec\x7c\xe8\xc2\x7c\x56\x41\xed\x55\x4c\x05\xff\x4f\xd9\xbd\x17\xcc\xee\xff\x0b\xec\x5b\xf0\xfd\xaf\xc7\x43\x87\xd2\x1c\xd3\x5b\xcc\xbe\xd0\xb1\xe0\x05\x27\xe5\xe8\x05\xb3\xbf\x7a\xc1\xec\xdd\xbf\xc6\xde\x7c\x5c\x6c\xf0\x69\x25\x76\xfc\xd5\x3f\xea\x3d\xb5\xce\xd2\xfc\x57\x8c\xc0\x73\x8a\x7b\x92\x8c\x4c\xfe\x8c\x56\x73\x92\x65\x25\x6a\x1d\x6d\x9a\xd4\xc1\xbe\xe6\xdc\x77\xbb\x3d\x37\x7c\x85\x61\x37\xec\xf9\xe1\xd9\xf4\xa8\x17\x84\x83\x53\xef\x24\x74\x1d\xbf\x37\x3b\x62\xde\xd0\x09\xb0\x8b\x3d\x6f\x13\xc8\x9d\xad\xea\xef\xe4\x1f\x30\xc1\x64\x8a\x87\xf9\x43\xc7\xf5\x66\x35\xbf\x7d\x14\xf8\xfe\x97\xc0\x0d\x90\x19\x81\x1a\xfe\x54\xd8\x36\xdb\x3e\x2a\x83\x43\x55\x50\x17\xc1\x7c\x56\x6d\x8d\xee\x06\xcc\x7d\x60\x82\xcf\x65\x9f\x08\x9c\x19\x02\x5b\x58\xa1\x98\x89\x8c\x2a\xf6\x17\xe5\xff\xe3\x3f\x37\xb6\x1f\x47\xc0\x84\x88\x69\xee\xb7\xe5\x45\xd7\xe7\x82\xb8\x39\x01\x25\xbf\x05\x00\x00\xff\xff\x0f\xe8\xf7\xd0\xc3\x0d\x00\x00")

func resourceLocalwebIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_resourceLocalwebIndexHtml,
		"resource/localweb/index.html",
	)
}

func resourceLocalwebIndexHtml() (*asset, error) {
	bytes, err := resourceLocalwebIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "resource/localweb/index.html", size: 3523, mode: os.FileMode(0644), modTime: time.Unix(1599093933, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xe8, 0xe8, 0x33, 0x93, 0x7d, 0x2f, 0xb6, 0xdd, 0xe0, 0x70, 0x23, 0x38, 0x69, 0xc8, 0x11, 0xf1, 0x54, 0xe7, 0x4, 0xa8, 0xc4, 0xb8, 0x46, 0xa7, 0x96, 0x9b, 0x30, 0xbc, 0x42, 0xbc, 0x1e, 0xd5}}
	return a, nil
}

var _resourceLocalwebLoginHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x51\x51\x6b\xdb\x30\x10\x7e\xf7\xaf\xb8\xe9\x61\x4f\xb3\x2e\x5d\xfd\xd0\x36\x8e\x61\x4b\x32\x56\xe8\xb6\x50\x5c\xc6\x28\xa5\xc8\xb6\x9a\x88\x29\x92\xa6\xbb\xd4\x0b\xa5\xff\x7d\xc8\x35\xac\x1d\x2b\xf9\x1e\x7c\xdc\xf7\xf9\x3e\x7d\x3a\x95\x6f\x16\xdf\xe6\xf5\x8f\xd5\x12\x3e\xd7\x5f\x2e\x60\x75\xf5\xf1\xe2\x7c\x0e\x22\x47\xfc\x7e\x3c\x47\x5c\xd4\x8b\x27\xa1\x90\x13\xa8\xa3\x72\x64\xd8\x78\xa7\x2c\xe2\xf2\xab\xc8\x60\x84\xd8\x30\x87\x33\xc4\xbe\xef\x65\x7f\x2c\x7d\x5c\x63\x7d\x89\x47\xa7\xa7\x27\x78\xb9\x9c\xe7\x1b\xde\xda\x62\x92\xa7\x7e\x52\xbc\x2f\xd0\x7a\x4f\x5a\x76\xdc\x89\x2a\x2b\x93\x98\x8a\x56\x5d\x55\x6e\x35\x2b\x48\x66\xb9\xfe\xb5\x33\xf7\x33\xd1\x7a\xc7\xda\x71\xce\xfb\xa0\x05\x8c\xdd\x4c\xb0\xfe\xcd\x98\x26\xa7\xd0\x6e\x54\x24\xcd\xb3\xab\xfa\x53\x7e\x22\xaa\x21\x53\x49\xbc\xb7\x1a\xd2\xd0\xf8\x6f\x4b\x34\x6a\x09\xac\x1a\xab\xe5\x56\x19\x07\x0f\x8f\x7f\xd9\x28\xa3\xef\x5f\x30\x9d\x6c\xb5\xb5\xcf\xa9\xce\xdc\xcb\xc6\xfa\xf6\xe7\xbf\x64\x50\x51\xad\xa3\x0a\x9b\xe7\x82\xbc\xf3\x8e\x27\xf0\x00\xa9\x9e\x1d\x15\x81\xe1\x43\x34\xca\xbe\x03\x52\x8e\x72\xd2\xd1\xdc\x4d\xe1\x31\x7b\x4a\x8d\x43\xec\x2a\x2b\x71\xd8\x46\x56\x36\xbe\xdb\x57\x59\x19\xa0\xb5\x8a\x68\x26\x06\x37\x51\xad\xac\x56\xa4\xc1\xb8\xb0\x63\x08\x8a\xa8\xf7\xb1\x83\xeb\xdb\x43\xb8\x29\x31\xfc\xc7\xee\xfc\xa5\x8f\x5a\xa7\xbd\x1c\x76\xbb\xbd\x81\xb7\xae\xa1\x30\x7d\xed\x7b\x4d\xbb\x66\x6b\x78\x3c\x15\xc7\xcb\x0c\xcf\x56\xfd\x09\x00\x00\xff\xff\x50\xe0\x91\x78\x78\x02\x00\x00")

func resourceLocalwebLoginHtmlBytes() ([]byte, error) {
	return bindataRead(
		_resourceLocalwebLoginHtml,
		"resource/localweb/login.html",
	)
}

func resourceLocalwebLoginHtml() (*asset, error) {
	bytes, err := resourceLocalwebLoginHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "resource/localweb/login.html", size: 632, mode: os.FileMode(0644), modTime: time.Unix(1599053210, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xc9, 0x7b, 0x32, 0xf6, 0xcd, 0xea, 0x2b, 0xaf, 0x57, 0x23, 0x2f, 0x30, 0xd1, 0xef, 0x2f, 0x67, 0xa2, 0x8d, 0xd6, 0x63, 0xef, 0xf5, 0x6f, 0xc, 0x8a, 0xb, 0xbb, 0xaf, 0x75, 0xec, 0x92, 0x4c}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"resource/localweb/buy.html":   resourceLocalwebBuyHtml,
	"resource/localweb/index.html": resourceLocalwebIndexHtml,
	"resource/localweb/login.html": resourceLocalwebLoginHtml,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"resource": &bintree{nil, map[string]*bintree{
		"localweb": &bintree{nil, map[string]*bintree{
			"buy.html":   &bintree{resourceLocalwebBuyHtml, map[string]*bintree{}},
			"index.html": &bintree{resourceLocalwebIndexHtml, map[string]*bintree{}},
			"login.html": &bintree{resourceLocalwebLoginHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
